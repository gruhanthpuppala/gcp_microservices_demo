# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: "Continuous Integration - Pull Request"

on:
  pull_request:
    branches:
      - main
    paths-ignore:
      - '**/README.md'
      - 'kustomize/**'
      - '.github/workflows/kustomize-build-ci.yaml'
      - 'terraform/**'
      - '.github/workflows/terraform-validate-ci.yaml'
      - 'helm-chart/**'
      - '.github/workflows/helm-chart-ci.yaml'

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  deployment-tests:
    runs-on: [self-hosted, is-enabled]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      # Authenticate with GCP
      - name: Authenticate with GCP
        run: |
          # Replace these variables with actual values
          GCP_SERVICE_ACCOUNT_KEY='{
            "type": "service_account",
            "project_id": "your-project-id",
            "private_key_id": "your-private-key-id",
            "private_key": "-----BEGIN PRIVATE KEY-----\\nMIIEvQIBADANBgkqhki...\\n-----END PRIVATE KEY-----\\n",
            "client_email": "your-service-account-email",
            "client_id": "your-client-id",
            "auth_uri": "https://accounts.google.com/o/oauth2/auth",
            "token_uri": "https://oauth2.googleapis.com/token",
            "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
            "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/your-service-account-email"
          }'

          PROJECT_ID="your-project-id"
          PR_CLUSTER="your-cluster-name"
          REGION="your-region"

          # Write service account key to file
          printf "%s" "$GCP_SERVICE_ACCOUNT_KEY" > key.json

          # Authenticate with GCP
          gcloud auth activate-service-account --key-file=key.json
          gcloud config set project $PROJECT_ID

      # Debug Step: Validate the key file creation and content
      - name: Debug Key File
        run: |
          ls -l
          cat key_1.json
      - name: Debug Environment
        run: |
          echo "GCP CLI Version:"
          gcloud --version
          echo "OpenSSL Version:"
          openssl version
      # Connect to GKE Cluster
      - name: Connect to GKE Cluster
        run: |
          gcloud container clusters get-credentials $PR_CLUSTER --region $REGION --project $PROJECT_ID

      # Create Namespace for PR
      - name: Create Namespace for PR
        run: |
          NAMESPACE="pr${{ github.event.pull_request.number }}"
          kubectl create namespace $NAMESPACE

      # Build and Push Images with Skaffold
      - name: Build and Push Images with Skaffold
        run: |
          NAMESPACE="pr${{ github.event.pull_request.number }}"
          skaffold config set --global local-cluster false
          skaffold run --default-repo=us-docker.pkg.dev/$PROJECT_ID/refs/pull/${{ github.event.pull_request.number }} \
            --tag=${{ github.event.pull_request.number }} \
            --namespace=$NAMESPACE -p network-policies

      # Wait for Pods to Be Ready
      - name: Wait for Pods to Be Ready
        run: |
          kubectl -n pr${{ github.event.pull_request.number }} wait --for=condition=available --timeout=1000s deployment --all

      # Query External IP for Frontend Service
      - name: Query External IP for Frontend Service
        run: |
          kubectl -n pr${{ github.event.pull_request.number }} get service frontend-external -o jsonpath='{.status.loadBalancer.ingress[0].ip}'

      # Cleanup Step: Delete the key file after authentication is complete
      - name: Clean Up Key File
        run: rm -f key_1.json
