# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#-----------------------

name: "Continuous Integration - Pull Request"
on:
  pull_request:
    branches:
      - main
    paths-ignore:
      - '**/README.md'
      - 'kustomize/**'
      - '.github/workflows/kustomize-build-ci.yaml'
      - 'terraform/**'
      - '.github/workflows/terraform-validate-ci.yaml'
      - 'helm-chart/**'
      - '.github/workflows/helm-chart-ci.yaml'

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  code-tests:
    runs-on: [self-hosted, is-enabled]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        env:
          DOTNET_INSTALL_DIR: "./.dotnet"
        with:
          dotnet-version: '9.0'
      - uses: actions/setup-go@v5
        with:
          go-version: '1.23'
      - name: Go Unit Tests
        timeout-minutes: 10
        run: |
          for GO_PACKAGE in "shippingservice" "productcatalogservice" "frontend/validator"; do
            echo "Testing $GO_PACKAGE..."
            pushd src/$GO_PACKAGE
            go test
            popd
          done
      - name: C# Unit Tests
        timeout-minutes: 10
        run: |
          dotnet test src/cartservice/

  deployment-tests:
    runs-on: [self-hosted, is-enabled]
    needs: code-tests
    strategy:
      matrix:
        profile: ["local-code"]
      fail-fast: true
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Debugging Runner Info
        run: |
          echo "Printing Runner Information"
          echo "Working Directory: $(pwd)"
          echo "Fetching Runner Public IP:"
          curl https://api.ipify.org

      - name: Build + Deploy PR images to GKE
        timeout-minutes: 20
        run: |
          set -ex  # Enable debugging

          # Step 1: Set Namespace
          echo "DEBUG: Setting Namespace"
          NAMESPACE="pr${{ github.event.pull_request.number }}"
          echo "NAMESPACE=${NAMESPACE}" >> $GITHUB_ENV
          echo "DEBUG: Namespace set to ${NAMESPACE}"

          # Step 2: Authenticate with Docker Registry
          echo "DEBUG: Authenticating with Google Artifact Registry..."
          yes | gcloud auth configure-docker us-central1-docker.pkg.dev > /dev/null 2>&1
          if [[ $? -ne 0 ]]; then
            echo "ERROR: Docker authentication with Artifact Registry failed"
            exit 1
          fi
          echo "DEBUG: Docker authentication successful"

          # Step 3: Authenticate and Get Cluster Credentials
          echo "DEBUG: Fetching Kubernetes cluster credentials"
          gcloud container clusters get-credentials ${{ secrets.PR_CLUSTER }} --region ${{ secrets.REGION }} --project ${{ secrets.PROJECT_ID }}
          if [[ $? -ne 0 ]]; then
            echo "ERROR: Failed to fetch Kubernetes cluster credentials"
            exit 1
          fi
          echo "DEBUG: Successfully fetched Kubernetes cluster credentials"

          # Step 4: Create Namespace if Not Exists
          echo "DEBUG: Checking if namespace ${NAMESPACE} exists"
          if ! kubectl get namespace $NAMESPACE; then
            echo "DEBUG: Namespace ${NAMESPACE} does not exist, creating..."
            kubectl create namespace $NAMESPACE
            if [[ $? -ne 0 ]]; then
              echo "ERROR: Failed to create namespace ${NAMESPACE}"
              exit 1
            fi
          else
            echo "DEBUG: Namespace ${NAMESPACE} already exists"
          fi

          # Step 5: Deploy Application using Skaffold
          echo "DEBUG: Starting Skaffold deployment..."
          skaffold run --default-repo=us-central1-docker.pkg.dev/${{ secrets.PROJECT_ID }}/pr-images \
            --tag=${{ github.event.pull_request.number }}-${{ github.sha }} \
            --namespace=$NAMESPACE \
            -p network-policies \
            -v=debug  # Enable Skaffold debug logs
          if [[ $? -ne 0 ]]; then
            echo "ERROR: Skaffold deployment failed"
            exit 1
          fi
          echo "DEBUG: Skaffold deployment completed successfully"

      - name: Wait For Pods
        timeout-minutes: 20
        run: |
          set -x  # Enable debugging
          kubectl config set-context --current --namespace=$NAMESPACE
          for DEPLOYMENT in redis-cart adservice cartservice checkoutservice currencyservice emailservice frontend loadgenerator paymentservice productcatalogservice recommendationservice shippingservice; do
            echo "DEBUG: Waiting for deployment ${DEPLOYMENT} to be ready"
            kubectl wait --for=condition=available --timeout=1000s deployment/$DEPLOYMENT
            if [[ $? -ne 0 ]]; then
              echo "ERROR: Deployment ${DEPLOYMENT} failed to become ready"
              exit 1
            fi
          done
          echo "DEBUG: All deployments in ${NAMESPACE} are ready"

      - name: Query EXTERNAL_IP for staging
        timeout-minutes: 5
        run: |
          set -x  # Enable debugging
          NAMESPACE="pr${{ github.event.pull_request.number }}"
          echo "NAMESPACE=${NAMESPACE}" >> $GITHUB_ENV
          get_externalIP() {
            kubectl get service frontend-external --namespace $NAMESPACE -o jsonpath='{.status.loadBalancer.ingress[0].ip}'
          }
          until [[ -n "$(get_externalIP)" ]]; do
            echo "DEBUG: Waiting for external IP to be assigned to frontend-external service in namespace ${NAMESPACE}"
            sleep 3
          done
          EXTERNAL_IP=$(get_externalIP)
          if [[ -z "$EXTERNAL_IP" ]]; then
            echo "ERROR: Failed to retrieve external IP for frontend-external service"
            exit 1
          fi
          echo "DEBUG: External IP assigned: ${EXTERNAL_IP}"
          echo "EXTERNAL_IP=${EXTERNAL_IP}" >> $GITHUB_ENV
